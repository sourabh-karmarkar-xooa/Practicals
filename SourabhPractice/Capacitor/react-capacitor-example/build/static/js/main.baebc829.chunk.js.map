{"version":3,"sources":["logo.svg","components/Modal.js","components/CameraComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Device","Plugins","Modals","Modal","props","showDeviceInfo","bind","getInfo","info","alert","title","message","uuid","model","onClick","this","Component","Camera","CameraComponent","takePicture","getPhoto","quality","allowEditing","resultType","CameraResultType","Uri","image","imageUrl","webPath","console","log","App","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"4HAAAA,EAAOC,QAAU,IAA0B,kC,4PCEnCC,EAAmBC,IAAnBD,OAAQE,EAAWD,IAAXC,OACKC,E,kDAEnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,eAAiB,EAAKA,eAAeC,KAApB,gBAFL,E,6LAMAN,EAAOO,U,cAApBC,E,gBACEN,EAAOO,MAAM,CACjBC,MAAO,OACPC,QAAQ,SAAD,OAAWH,EAAKI,KAAhB,iCACQJ,EAAKK,S,gIAKtB,OACE,4BAAQC,QAASC,KAAKV,gBAAtB,yB,GAlB6BW,aCD3BC,EAAWhB,IAAXgB,OAEaC,E,kDACnB,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IACDe,YAAc,EAAKA,YAAYb,KAAjB,gBAFF,E,4LAMGW,EAAOG,SAAS,CAClCC,QAAS,GACTC,cAAc,EACdC,WAAYC,IAAiBC,M,OAHzBC,E,OASFC,EAAWD,EAAME,QAErBC,QAAQC,IAAI,oBAAkBH,G,gIAI9B,OACE,4BAAQb,QAASC,KAAKI,aAAtB,qB,GAvBuCH,aCmB9Be,E,uKAhBX,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,wBAAIH,UAAU,aAAd,oBACA,kBAAC,EAAD,MAAS,6BACT,kBAAC,EAAD,MACA,uBAAGA,UAAU,aAAb,wBACuB,4CADvB,8B,GATQhB,aCOEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAM1C,c","file":"static/js/main.baebc829.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { Plugins } from '@capacitor/core';\nconst { Device, Modals } = Plugins;\nexport default class Modal extends Component {\n\n  constructor(props) {\n    super(props);\n    this.showDeviceInfo = this.showDeviceInfo.bind(this);\n  }\n\n  async showDeviceInfo() {\n    let info = await Device.getInfo();\n    await Modals.alert({\n      title: 'Info',\n      message: `UUID: ${info.uuid};\n            Model: ${info.model}`\n    });\n  }\n\n  render() {\n    return (\n      <button onClick={this.showDeviceInfo}> Show Device Info</button>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { Plugins, CameraResultType } from '@capacitor/core';\nconst { Camera } = Plugins;\n\nexport default class CameraComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.takePicture = this.takePicture.bind(this);\n  }\n\n  async takePicture() {\n    const image = await Camera.getPhoto({\n      quality: 90,\n      allowEditing: true,\n      resultType: CameraResultType.Uri\n    });\n    // image.webPath will contain a path that can be set as an image src. \n    // You can access the original file using image.path, which can be \n    // passed to the Filesystem API to read the raw data of the image, \n    // if desired (or pass resultType: CameraResultType.Base64 to getPhoto)\n    var imageUrl = image.webPath;\n    // Can be set to the src of an image now\n    console.log(\"imageUrl ---> \", imageUrl);\n  }\n\n  render() {\n    return (\n      <button onClick={this.takePicture}> Take Picture</button>\n    );\n  }\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Modal from './components/Modal';\nimport CameraComponent from './components/CameraComponent';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n          <Modal /><br />\n          <CameraComponent />\n          <p className=\"App-intro\">\n            To get started, edit <code>src/App.js</code> and save to reload.\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}